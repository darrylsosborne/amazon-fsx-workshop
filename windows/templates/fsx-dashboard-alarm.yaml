
AWSTemplateFormatVersion: 2010-09-09

Description: Creates an Amazon CloudWatch dashboard with Metric Math expressions to monitor an Amazon FSx file system.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: File System Parameters
      Parameters:
        - FileSystemId
        - LowFreeStorageCapacityThreshold        
    - Label:
        default: Alarm Notification
      Parameters:
        - EmailAddress
    ParameterLabels:
      EmailAddress:
        default: Email address
      FileSystemId:
        default: File system ID
      LowFreeStorageCapacityThreshold:
        default: Threshold

Parameters:
  EmailAddress:
    Description: The email address for alarm notification.
    Type: String
  FileSystemId:
    AllowedPattern: ^(fs-)([a-z0-9]{17})$
    Description: Amazon FSx file system ID
    Type: String
  LowFreeStorageCapacityThreshold:
    AllowedPattern: ^[0-9]+$
    ConstraintDescription: Must be an integer.
    Default: 1
    Description: Low free storage capacity threshold (TiB)
    Type: String

Resources:
  FSxCwDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Join [ '_', [ !Ref 'AWS::Region', !Ref FileSystemId, 'alarm' ] ]
      DashboardBody:
        {"Fn::Join":["",['{
              "widgets": [
                  {
                      "type": "text",
                      "x": 18,
                      "y": 0,
                      "width": 6,
                      "height": 3,
                      "properties": {
                          "markdown": "\n# Amazon FSx file system: ',!Ref 'FileSystemId','\n## Region: ',!Ref 'AWS::Region','\n"
                      }
                  },
                  {
                      "type": "metric",
                      "x": 0,
                      "y": 3,
                      "width": 18,
                      "height": 9,
                      "properties": {
                          "view": "timeSeries",
                          "stacked": false,
                          "metrics": [
                              [ { "expression": "((m1+m2)/1048576)/PERIOD(m2)", "label": "Total Data Throughput (MiB/s)", "id": "e3", "yAxis": "left", "color": "#2ca02c" } ],
                              [ { "expression": "(m1/1048576)/PERIOD(m1)", "label": "Data Write Throughput (MiB/s)", "id": "e1", "yAxis": "left", "color": "#1f77b4" } ],
                              [ { "expression": "(m2/1048576)/PERIOD(m2)", "label": "Data Read Throughput (MiB/s)", "id": "e2", "yAxis": "left", "color": "#ff7f0e" } ],
                              [ "AWS/FSx", "DataWriteBytes", "FileSystemId", "',!Ref 'FileSystemId','", { "period": 60, "stat": "Sum", "id": "m1", "yAxis": "right", "visible": false } ],
                              [ ".", "DataReadBytes", ".", ".", { "period": 60, "stat": "Sum", "id": "m2", "yAxis": "right", "visible": false } ]
                          ],
                          "region": "',!Ref 'AWS::Region','",
                          "period": 60,
                          "title": "Throughput (MiB/s)",
                          "legend": {
                              "position": "right"
                          }
                      }
                  },
                  {
                      "type": "metric",
                      "x": 18,
                      "y": 3,
                      "width": 6,
                      "height": 9,
                      "properties": {
                          "metrics": [
                              [ { "expression": "m1*100/(m1+m2)", "label": "Data Write (%)__", "id": "e1", "stat": "Sum", "color": "#1f77b4" } ],
                              [ { "expression": "m2*100/(m1+m2)", "label": "Data Read (%)__", "id": "e2", "stat": "Sum", "color": "#ff7f0e" } ],
                              [ "AWS/FSx", "DataWriteBytes", "FileSystemId", "',!Ref 'FileSystemId','", { "id": "m1", "visible": false } ],
                              [ ".", "DataReadBytes", ".", ".", { "id": "m2", "visible": false } ]
                          ],
                          "view": "timeSeries",
                          "region": "',!Ref 'AWS::Region','",
                          "stacked": false,
                          "title": "Percent Throughput (%)",
                          "period": 60,
                          "legend": {
                              "position": "right"
                          },
                          "stat": "Sum"
                      }
                  },
                  {
                      "type": "metric",
                      "x": 0,
                      "y": 12,
                      "width": 18,
                      "height": 9,
                      "properties": {
                          "view": "timeSeries",
                          "stacked": false,
                          "metrics": [
                              [ { "expression": "(m1+m2+m3)/PERIOD(m3)", "label": "Total Operations", "id": "e4", "yAxis": "left", "color": "#2ca02c" } ],
                              [ { "expression": "(m1)/PERIOD(m1)", "label": "Data Write Operations", "id": "e1", "yAxis": "left", "color": "#1f77b4" } ],
                              [ { "expression": "(m2)/PERIOD(m2)", "label": "Data Read Operations", "id": "e2", "yAxis": "left", "color": "#ff7f0e" } ],
                              [ { "expression": "(m3)/PERIOD(m3)", "label": "Metadata Operations", "id": "e3", "yAxis": "left", "color": "#d62728" } ],
                              [ "AWS/FSx", "DataWriteOperations", "FileSystemId", "',!Ref 'FileSystemId','", { "period": 60, "stat": "Sum", "id": "m1", "visible": false } ],
                              [ ".", "DataReadOperations", ".", ".", { "period": 60, "stat": "Sum", "id": "m2", "visible": false } ],
                              [ ".", "MetadataOperations", ".", ".", { "period": 60, "stat": "Sum", "id": "m3", "visible": false } ]
                          ],
                          "region": "',!Ref 'AWS::Region','",
                          "period": 60,
                          "title": "Operations per Second",
                          "legend": {
                              "position": "right"
                          }
                      }
                  },
                  {
                      "type": "metric",
                      "x": 18,
                      "y": 12,
                      "width": 6,
                      "height": 9,
                      "properties": {
                          "metrics": [
                              [ { "expression": "m1*100/(m1+m2+m3)", "label": "Data Write (%)__", "id": "e1", "color": "#1f77b4" } ],
                              [ { "expression": "m2*100/(m1+m2+m3)", "label": "Data Read (%)__", "id": "e2", "color": "#ff7f0e" } ],
                              [ { "expression": "m3*100/(m1+m2+m3)", "label": "Metadata (%)__", "id": "e3", "color": "#d62728" } ],
                              [ "AWS/FSx", "DataWriteOperations", "FileSystemId", "',!Ref 'FileSystemId','", { "stat": "Sum", "id": "m1", "visible": false } ],
                              [ ".", "DataReadOperations", ".", ".", { "stat": "Sum", "id": "m2", "visible": false } ],
                              [ ".", "MetadataOperations", ".", ".", { "stat": "Sum", "id": "m3", "visible": false } ]
                          ],
                          "view": "timeSeries",
                          "region": "',!Ref 'AWS::Region','",
                          "stacked": false,
                          "title": "Percent Operations per Second (%)",
                          "period": 60,
                          "legend": {
                              "position": "right"
                          },
                          "stat": "Average"
                      }
                  },
                  {
                      "type": "metric",
                      "x": 0,
                      "y": 0,
                      "width": 18,
                      "height": 3,
                      "properties": {
                          "metrics": [
                              [ { "expression": "(m1/1073741824)", "label": "Available Storage (TiB)", "id": "e1", "color": "#2ca02c" } ],
                              [ "AWS/FSx", "FreeDataStorageCapacity", "FileSystemId", "',!Ref 'FileSystemId','", { "id": "m1", "visible": false } ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "',!Ref 'AWS::Region','",
                          "stat": "Sum",
                          "period": 60,
                          "title": "Available Storage Capacity (TiB)",
                          "legend": {
                              "position": "right"
                          }
                      }
                  }
              ]
          }
        ']]}
  FsxStorageCapacityFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Code:
        ZipFile: !Sub |
          import boto3
          import os
          import sys

          def handler(event, context):
              if not os.environ.get('filesystemid'):
                  print "Unable to get the environment variable filesystemid"
                  sys.exit(1)
              else:
                  filesystemid = os.environ.get('filesystemid')

              if not os.environ.get('region'):
                  print "Unable to get the environment variable region"
                  sys.exit(1)
              else:
                  region = os.environ.get('region')

              def fsx_get_size():
                  client = boto3.client('fsx')
                  response = client.describe_file_systems(FileSystemId=filesystemid)
                  k = response['FileSystems'][0]['StorageCapacity']['Value']
                  return k

              def cloudwatch_put_metric():
                  client = boto3.client('cloudwatch')
                  client.put_metric_data(
                      MetricData=[
                          {
                              'MetricName': 'StorageCapacity',
                              'Dimensions': [
                                  {
                                      'Name': 'FileSystemId',
                                      'Value': filesystemid
                                  },
                              ],
                              'Unit': 'None',
                              'Value': fsx_get_size()
                          },
                      ],
                      Namespace='Custom/FSx'
                  )
                  print('CloudWatch metric StorageCapacity sucessfully updated.')

              cloudwatch_put_metric()
      Description: Lambda function to update the StorageCapacity FSx CloudWatch metric
      Environment:
        Variables:
          filesystemid: !Ref FileSystemId
          region: !Ref 'AWS::Region'
      FunctionName: !Join [ '', [ !Ref FileSystemId, '-storage-capacity' ] ]
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python2.7
      Timeout: 60
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/CloudWatchFullAccess
      - arn:aws:iam::aws:policy/AmazonFSxReadOnlyAccess